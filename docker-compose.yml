# docker-compose.yml
 
services:

  postgrest:
    restart: always
    image: "postgrest/postgrest:v12.0.2"
    ports:
      - "3000:3000"
    links:
      - postgres:postgres
    environment:
      PGRST_DB_URI: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postgres"
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: web_anon
      PGRST_OPENAPI_SERVER_PROXY_URI: ${PGRST_OPENAPI_SERVER_PROXY_URI}
      PGRST_DB_PRE_CONFIG: "postgrest.pre_config"
      PGRST_OPENAPI_SECURITY_ACTIVE: "true"
      
    depends_on:
      - postgres


  postgres:
    restart: always
    image: "postgres:16.2"
    ports:
        - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}

      - POSTGRES_EXTENSIONS= pgcrypto, pgjwt

      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
      - RUN_AS_ROOT=true
  
    volumes:

      # pgjwt & pgcrypto Extension
      - ./pgjwt/pgjwt.control:/usr/share/postgresql/16/extension/pgjwt.control
      - ./pgjwt/pgjwt--0.2.0-tfm.sql:/usr/share/postgresql/16/extension/pgjwt--0.2.0.sql
      - ./pgcrypto.sql:/docker-entrypoint-initdb.d/30-pgcrypto.sql
      - ./postgrest-config.sql:/docker-entrypoint-initdb.d/11-postgrest-config.sql

      # Postgrest Permission Management
      - ./ci2027-db-structure/globals.sql:/docker-entrypoint-initdb.d/10-globals.sql

      ### Old Setup (deprecated)
      - ./ci2027-db-structure/structure.sql:/docker-entrypoint-initdb.d/20-structure.sql
      - ./ci2027-db-data/data.sql:/docker-entrypoint-initdb.d/40-data.sql
      
      ### New Setup (to be implemented) 
      - ./ci2027-db-structure/ci2027/structure.sql:/docker-entrypoint-initdb.d/930-structure.sql
      - ./ci2027-db-structure/ci2027/lookup_tables.sql:/docker-entrypoint-initdb.d/931-lookup_tables.sql

      - ./ci2027-db-structure/ci2027/cluster.sql:/docker-entrypoint-initdb.d/932-cluster.sql
      - ./ci2027-db-structure/ci2027/plot.sql:/docker-entrypoint-initdb.d/933-plot.sql
      
      ##### Example Data (to be replaced with actual data later on)
      #- ./ci2027-db-structure/ci2027/data.sql:/docker-entrypoint-initdb.d/94-data.sql

      ### Test Setup to be used by automated tests
      - ./default/user.sql:/docker-entrypoint-initdb.d/99-default-user.sql
      
      # - ./pgdata:/var/lib/postgresql/data

  # https://hub.docker.com/r/prodrigestivill/postgres-backup-local
  pgbackups:
    image: prodrigestivill/postgres-backup-local
    restart: always
    user: postgres:postgres 
    volumes:
        - /var/opt/pgbackups:/backups
    links:
        - postgres # :${PGADMIN_HOST_NAME}
    depends_on:
        - postgres
    environment:
        - POSTGRES_HOST=postgres
        - POSTGRES_DB=postgres
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        # - POSTGRES_PASSWORD_FILE=/run/secrets/db_password <-- alternative for POSTGRES_PASSWORD (to use with docker secrets)
        # - POSTGRES_EXTRA_OPTS=-Z1 --schema=public --blobs
        - SCHEDULE=@daily
        - BACKUP_KEEP_DAYS=7
        - BACKUP_KEEP_WEEKS=4
        - BACKUP_KEEP_MONTHS=6
        - HEALTHCHECK_PORT=8080

  pgadmin:
    restart: always
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    environment:
        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        PGADMIN_LISTEN_PORT: 5050
        SCRIPT_NAME: "/pgadmin"
    ports:
        - "5050:5050"
    links:
        - postgres:${PGADMIN_HOST_NAME}
    depends_on:
      - postgrest
    user: root
    volumes:
      - ./pgadmindata:/var/lib/pgadmin

  swagger:
    restart: always
    image: swaggerapi/swagger-ui
    ports:
        - "4080:8080"
    expose:
        - "4080"
    environment:
        API_URL: ${PGRST_OPENAPI_SERVER_PROXY_URI}
    depends_on:
      - postgrest
